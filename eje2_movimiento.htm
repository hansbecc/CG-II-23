 <html>
  <head>
    <meta charset="utf-8"/>
    <script id="shader-vs" type="x-shader/x-vertex">
      attribute vec3 aVertexPosition;
      attribute vec4 aVertexColor;
      
      uniform mat4 uMMatrix;
      uniform mat4 uVMatrix;
      uniform mat4 uPMatrix;
      
      varying vec4 vColor;
      
      void main(void)
      {
	gl_Position = uPMatrix * uVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
	vColor = aVertexColor;
      }
    </script>
    <script id="shader-fs" type="x-shader/x-fragment">
      precision mediump float;
      varying vec4 vColor;
      
      void main(void)
      {
	gl_FragColor = vColor;
      }
    </script>
    
    <!--Funciones-->
    <script type="text/javascript" src="weblib/glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="weblib/jquery-2.1.0.min.js"></script>
    <!--Adicione esta linea-->
<script type="text/javascript" src="weblib/webgl-utils.js"></script>
    <script type="text/javascript">
    
      var gl;
      var shaderProgram;
      var piramideVertexPositionBuffer;
      var cuboVertexPositionBuffer;
      var piramideVertexColorBuffer;
      var cuboVertexColorBuffer;
      
      
      var mMatrix = mat4.create();
       /*---Adicione esta linea---*/
  var mMatrixPila = [];
  var vMatrix = mat4.create();
  var pMatrix = mat4.create();

  /*---Adicione esta función---*/
  function mPushMatrix() {
    var copy = mat4.create();
    mat4.set(mMatrix, copy);
    mMatrixPila.push(copy);
  }

  /*---Adicione esta función---*/
  function mPopMatrix() {
    if (mMatrixPila.length == 0) {
      throw "inválido popMatrix!";
    }
    mMatrix = mMatrixPila.pop();
  }
    
      // Iniciar el ambiente cuando la página haya cargado
      $(function()
      {
	iniciaWebGL();
      });
      
      // Iniciar el ambiente
      function iniciaWebGL()
      {
	var canvas = $('#licao01-canvas')[0];
	iniciarGL(canvas); // Definir como un canvas 3D
	iniciarShaders();  // Obter y procesar los Shaders
	iniciarBuffers();  // Enviar el triangulo y cuadrado al GPU
	iniciarAmbiente(); // Definir background y color do objeto
 /*---Borrar designScene y adicione esta linea---*/
  tick();            // Diseñar la escena repetidamente
      }
      function tick()
{
  requestAnimFrame(tick);
  designScene();
  animar();
}
var rPiramide = 0;
var rCubo= 0;
      function iniciarGL(canvas)
      {
	try
	{
	  gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
	  gl.viewportWidth = canvas.width;
	  gl.viewportHeight = canvas.height;
	}
	catch(e)
	{
	  if(!gl)
	  {
	    alert("No puede inicializar WebGL, disculpe");
	  }
	}
      }
      
      function iniciarShaders()
      {
	var vertexShader = getShader(gl, "#shader-vs");
	var fragmentShader = getShader(gl, "#shader-fs");
	
	shaderProgram = gl.createProgram();
	gl.attachShader(shaderProgram, vertexShader);
	gl.attachShader(shaderProgram, fragmentShader);
	gl.linkProgram(shaderProgram);
	
	if(!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
	{
	  alert("No puede inicializar shaders");
	}
	
	gl.useProgram(shaderProgram);
	
	shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
	gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
	
	shaderProgram.vertexColorAttribute = gl.getAttribLocation(shaderProgram, "aVertexColor");
	gl.enableVertexAttribArray(shaderProgram.vertexColorAttribute);
	
	shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
	shaderProgram.vMatrixUniform = gl.getUniformLocation(shaderProgram, "uVMatrix");
	shaderProgram.mMatrixUniform = gl.getUniformLocation(shaderProgram, "uMMatrix");
	
	
      }
      
      function getShader(gl, id)
      {
	var shaderScript = $(id)[0];
	if(!shaderScript) 
	{
	  return null;
	}
	
	var str = "";
	var k = shaderScript.firstChild;
	while(k)
	{
	  if(k.nodeType == 3)
	    str += k.textContent;
	  k = k.nextSibling;
	}
	
	var shader;
	if(shaderScript.type == "x-shader/x-fragment")
	{
	  shader = gl.createShader(gl.FRAGMENT_SHADER);
	}
	else if(shaderScript.type == "x-shader/x-vertex")
	{
	  shader = gl.createShader(gl.VERTEX_SHADER);
	}
	else
	{
	  return null;
	}
	
	gl.shaderSource(shader, str);
	gl.compileShader(shader);
	
	if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS))
	{
	  alert(gl.getShaderInfoLog(shader));
	  return null;
	}
	
	return shader;
      }
      
      function iniciarBuffers()
      {
	piramideVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexPositionBuffer);
	var vertices = [
	     0.0, 1.0, 0.0,
	    -1.0,-1.0, 0.0,
	     1.0,-1.0, 0.0
	];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	piramideVertexPositionBuffer.itemSize = 3;
	piramideVertexPositionBuffer.numItems = 3;
	
	piramideVertexColorBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexColorBuffer);
	var colors = [
	    1.0, 0.0, 0.0, 1.0,
	    0.0, 1.0, 0.0, 1.0,
	    0.0, 0.0, 1.0, 1.0,
	];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
	piramideVertexColorBuffer.itemSize = 4;
	piramideVertexColorBuffer.numItems = 3;
	
	cuboVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexPositionBuffer);
	vertices = [
	  1.0, 1.0, 0.0,
	 -1.0, 1.0, 0.0,
	  1.0,-1.0, 0.0,
	 -1.0,-1.0, 0.0
	];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	cuboVertexPositionBuffer.itemSize = 3;
	cuboVertexPositionBuffer.numItems = 4;
	
	cuboVertexColorBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexColorBuffer);
	colors = [];
	for(var i =0; i < 4; i++)
	{
	  colors = colors.concat([0.5, 0.5, 1.0, 1.0]);
	}
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
	cuboVertexColorBuffer.itemSize = 4;
	cuboVertexColorBuffer.numItems = 4;
      }
      
      function iniciarAmbiente()
      {
	gl.clearColor(0.0, 0.0, 0.0, 1.0);
	gl.enable(gl.DEPTH_TEST);
      }
      
      function designScene()
      {
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	mat4.perspective(45, gl.viewportWidth / gl.viewportHeight, 0.1, 100.0, pMatrix);
	mat4.identity(mMatrix);
	mat4.identity(vMatrix);
	
	// Diseñar triangulo
	mat4.translate(mMatrix, [-1.5, 0.0, -7.0]);
 /*---Adicione estas dos lineas---*/
  mPushMatrix();
  mat4.rotate(mMatrix, degToRad(rPiramide), [0, 1, 0]);


	gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexPositionBuffer);
	gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, piramideVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	gl.bindBuffer(gl.ARRAY_BUFFER, piramideVertexColorBuffer);
	gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, piramideVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
	setMatrixUniforms();
	gl.drawArrays(gl.PIRAMIDES, 0, piramideVertexPositionBuffer.numItems);
	/*---Adicione esta linea---*/
  mPopMatrix();  

	// Diseñando el Cuadrado
	mat4.translate(mMatrix, [3.0, 0.0, 0.0]);
/*---Adicione estas doss lineas---*/
  mPushMatrix();
  mat4.rotate(mMatrix, degToRad(rCubo), [1, 0, 0]);
	gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexPositionBuffer);
	gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, cuboVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	gl.bindBuffer(gl.ARRAY_BUFFER, cuboVertexColorBuffer);
	gl.vertexAttribPointer(shaderProgram.vertexColorAttribute, cuboVertexColorBuffer.itemSize, gl.FLOAT, false, 0, 0);
	setMatrixUniforms();
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, cuboVertexPositionBuffer.numItems);
/*---Adicione esta linea---*/
  mPopMatrix();
      }
      
      function setMatrixUniforms()
      {
	gl.uniformMatrix4fv(shaderProgram.pMatrixUniform, false, pMatrix);
	gl.uniformMatrix4fv(shaderProgram.vMatrixUniform, false, vMatrix);
	gl.uniformMatrix4fv(shaderProgram.mMatrixUniform, false, mMatrix);
      }
 var ultimo = 0;
  function animar()
  {
    var agora = new Date().getTime();
    if(ultimo != 0)
    {
      var diferenca = agora - ultimo;
      rPiramide  += ((90*diferenca)/1000.0) % 360.0;
      rCubo += ((75*diferenca)/1000.0) % 360.0;
    }
    ultimo = agora;
  }
function degToRad(graus) {
  return graus * Math.PI / 180;
}
    </script>
    
    <!--Apariencia de la página (canvas, background...)-->
    <style>
      canvas
      {
	border:none;
	width:500px;
	height:500px;
      }
    </style>
    
  </head>
  
  <body>
    <canvas id="licao01-canvas" width="500" height="500"></canvas>
  </body>
</html>
